<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetSoftPhoneInfos-v2" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" id="8ca53805-4f29-4e16-99e9-ebabcdd19744" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetSoftPhoneInfosSoapBinding" type="wsdl" bindingName="{http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2}GetSoftPhoneInfosSoapBinding" soapVersion="1_1" anonymous="optional" definition="file:/C:/Papyrus%20WS/WSDLs%20(2)/WSDLs/north/GetSoftPhoneInfos/v2/GetSoftPhoneInfos-v2.wsdl" id="1570fe81-cbc2-4494-8519-d5fb71746871" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\C:\Papyrus%20WS\WSDLs%20(2)\WSDLs\north\GetSoftPhoneInfos\v2\GetSoftPhoneInfos-v2.wsdl"><con:part><con:url>file:\C:\Papyrus%20WS\WSDLs%20(2)\WSDLs\north\GetSoftPhoneInfos\v2\GetSoftPhoneInfos-v2.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2" xmlns:types="http://WSA.francetelecom.com/types/GetSoftPhoneInfos" xmlns:intf="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <schema elementFormDefault="qualified" targetNamespace="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2" xmlns="http://www.w3.org/2001/XMLSchema">
      <import schemaLocation="GetSoftPhoneInfos.xsd" namespace="http://WSA.francetelecom.com/types/GetSoftPhoneInfos"/>
    </schema>
  </wsdl:types>
  <wsdl:message name="getClientSOFTPHONEInfoRequest">
    <wsdl:part element="types:getClientSOFTPHONEInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getClientSOFTPHONEInfoResponse">
    <wsdl:part element="types:getClientSOFTPHONEInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="GetSoftPhoneInfos">
    <wsdl:operation name="getClientSOFTPHONEInfo">
      <wsdl:documentation>The getClientSOFTPHONEInfo operation allows to retrieve service and
				softphone information from a customer identifier, from an IP phone
				number or from a VOIP SIP login</wsdl:documentation>
      <wsdl:input message="intf:getClientSOFTPHONEInfoRequest" name="getClientSOFTPHONEInfoRequest"/>
      <wsdl:output message="intf:getClientSOFTPHONEInfoResponse" name="getClientSOFTPHONEInfoResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetSoftPhoneInfosSoapBinding" type="intf:GetSoftPhoneInfos">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getClientSOFTPHONEInfo">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getClientSOFTPHONEInfoRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getClientSOFTPHONEInfoResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetSoftPhoneInfosService">
    <wsdl:documentation>The GetSoftPhoneInfos service provides information on devices managed by
			the FCPEsoft platform</wsdl:documentation>
    <wsdl:port binding="intf:GetSoftPhoneInfosSoapBinding" name="GetSoftPhoneInfos">
      <wsdlsoap:address location="http://WSA.francetelecom.com/papyrusCustomerCareWS/services/GetSoftPhoneInfos-v2"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\Papyrus%20WS\WSDLs%20(2)\WSDLs\north\GetSoftPhoneInfos\v2\GetSoftPhoneInfos.xsd</con:url><con:content><![CDATA[<schema elementFormDefault="qualified" targetNamespace="http://WSA.francetelecom.com/types/GetSoftPhoneInfos" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:types="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
  <element name="getClientSOFTPHONEInfo">
    <complexType>
      <sequence>
        <element name="businessUnit" type="xsd:string"/>
        <element name="cpeType" type="xsd:string"/>
        <element name="customerId" type="types:CustomerIdV2"/>
        <element name="callContext" minOccurs="0" type="types:CallContextV2"/>
      </sequence>
    </complexType>
  </element>
  <complexType name="CustomerIdV2">
    <sequence>
      <element name="type" minOccurs="0" type="xsd:string"/>
      <element name="value" minOccurs="0" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="CallContextV2">
    <sequence>
      <element name="applicationParameter" minOccurs="0" type="xsd:string"/>
      <element name="logLevel" minOccurs="0" type="xsd:string"/>
      <element name="timing" minOccurs="0" type="xsd:string"/>
      <element name="userName" minOccurs="0" type="xsd:string"/>
      <element name="userPassword" minOccurs="0" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="ResponseContextV2">
    <sequence>
      <element name="returnCode" type="xsd:int"/>
      <element name="returnFaultMessage" type="xsd:string"/>
      <element name="responseTime" type="xsd:string"/>
      <element name="applicationResponse" type="xsd:string"/>
    </sequence>
  </complexType>
  <element name="getClientSOFTPHONEInfoResponse">
    <complexType>
      <sequence>
        <element name="getClientSOFTPHONEInfoReturn" type="types:GetClientSOFTPHONEInfoBeanV2"/>
      </sequence>
    </complexType>
  </element>
  <complexType name="CustomerInfoV2">
    <sequence>
      <element name="accountId" type="xsd:string"/>
      <element name="offer" type="xsd:string"/>
      <xsd:element name="authEmail" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="EquipmentV2">
    <sequence>
      <element name="connectionMode" minOccurs="0" type="xsd:string"/>
      <element name="ipAddress" minOccurs="0" type="xsd:string"/>
      <element name="firstConnectiondate" minOccurs="0" type="xsd:dateTime"/>
      <element name="lastConnectiondate" minOccurs="0" type="xsd:dateTime"/>
      <element name="deviceBrand" minOccurs="0" type="xsd:string"/>
      <element name="deviceName" minOccurs="0" type="xsd:string"/>
      <element name="os" minOccurs="0" type="xsd:string"/>
      <element name="osVersion" minOccurs="0" type="xsd:string"/>
      <element name="softwareVersion" minOccurs="0" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="ServiceV2">
    <sequence>
      <element name="type" type="xsd:string"/>
      <element name="interfaceStatusList" minOccurs="0" maxOccurs="unbounded" type="types:InterfaceStatusV2"/>
      <element name="serviceStatus" minOccurs="0" type="int"/>
      <element name="parameterList" minOccurs="0" maxOccurs="unbounded" type="types:ParametersV2"/>
    </sequence>
  </complexType>
  <complexType name="InterfaceStatusV2">
    <sequence>
      <element name="name" type="xsd:string"/>
      <element name="value" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="ParametersV2">
    <sequence>
      <element name="name" type="xsd:string"/>
      <element name="value" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="GetClientSOFTPHONEInfoBeanV2">
    <sequence>
      <element name="businessUnit" minOccurs="0" type="xsd:string"/>
      <element name="customer" minOccurs="0" type="types:CustomerInfoV2"/>
      <element name="equipmentList" minOccurs="0" maxOccurs="unbounded" type="types:EquipmentV2"/>
      <element name="serviceList" minOccurs="0" maxOccurs="unbounded" type="types:ServiceV2"/>
      <element name="responseContext" type="types:ResponseContextV2"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.170.194.214:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://10.170.194.215:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://10.170.194.216:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://WSA.francetelecom.com/papyrusCustomerCareWS/services/GetSoftPhoneInfos-v2</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getClientSOFTPHONEInfo" bindingOperationName="getClientSOFTPHONEInfo" type="Request-Response" outputName="getClientSOFTPHONEInfoResponse" inputName="getClientSOFTPHONEInfoRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="caf363f8-305f-4dc4-aa4c-861c965a080f"><con:settings/><con:call name="Request 1" id="cda9ec55-ca07-4366-b382-141e9939658f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://WSA.francetelecom.com/papyrusCustomerCareWS/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>?</get:businessUnit>
         <get:cpeType>?</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>?</get:type>
            <!--Optional:-->
            <get:value>?</get:value>
         </get:customerId>
         <!--Optional:-->
         <get:callContext>
            <!--Optional:-->
            <get:applicationParameter>?</get:applicationParameter>
            <!--Optional:-->
            <get:logLevel>?</get:logLevel>
            <!--Optional:-->
            <get:timing>?</get:timing>
            <!--Optional:-->
            <get:userName>?</get:userName>
            <!--Optional:-->
            <get:userPassword>?</get:userPassword>
         </get:callContext>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2/GetSoftPhoneInfos/getClientSOFTPHONEInfoRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="GetSoftPhoneInfosSoapBinding TestSuite" id="77ff248a-6e68-4a61-a45d-44d92987aa8c"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientSOFTPHONEInfo TestCase" searchProperties="true" id="2cb828e1-3577-49e6-aa46-fcfbfcf97881" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Start Services at port 7031" id="a78e46b5-dc49-4365-811b-8d679e5eddcc"><con:settings/><con:config><script>import com.orange.linux.SwitchUser;
	SwitchUser sw = new SwitchUser();
	def portValue = context.expand('${#TestSuite#Port}');
	def serverValue = context.expand('${#TestSuite#Server}');
	def port = Integer.parseInt(portValue);
	sw.startPort(serverValue,port);
	log("Atishay Changes")
	log("Nimisha Changes")</script></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by NDIP)" id="11bf3427-e17b-4794-be9a-9a351725927d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by NDIP)" id="92e970a6-84ed-4d2b-a61e-08c88462533c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_NDIP}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#NDIP_Nominal}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d236b8b9-30de-4774-9827-a9653441dc68"/><con:assertion type="Schema Compliance" id="44b75614-42b1-4a21-b3ce-6a90fb4b5826"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="31bab806-b7ce-4d85-aa56-1f8e14afaee8"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def firstConnectiondate = responseHolder.getNodeValue("//ns1:firstConnectiondate")
def lastConnectiondate = responseHolder.getNodeValue("//ns1:lastConnectiondate")
log.info lastConnectiondate
def deviceBrand = responseHolder.getNodeValue("//ns1:deviceBrand")
def deviceName = responseHolder.getNodeValue("//ns1:deviceName")
def os = responseHolder.getNodeValue("//ns1:os")
def osVersion = responseHolder.getNodeValue("//ns1:osVersion")
def softwareVersion = responseHolder.getNodeValue("//ns1:softwareVersion")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def interfaceName = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:name")
def interfaceValue = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:value")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")
def counter = 0


// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#NDIP_nominal_accountId}')
assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#NDIP_authEmail}')
assert connectionMode == context.expand('${#TestSuite#NDIP_connectionMode}')
assert ipAddress == context.expand('${#TestSuite#IPAddress}')
assert firstConnectiondate == context.expand('${#TestSuite#firstConnectionDate}')
assert deviceBrand == context.expand('${#TestSuite#deviceBrand}')
assert deviceName == context.expand('${#TestSuite#deviceName}')
assert os == context.expand('${#TestSuite#os}')
assert osVersion == context.expand('${#TestSuite#osVersion}')
assert softwareVersion == context.expand('${#TestSuite#softwareVersion}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert interfaceName == context.expand('${#TestSuite#NDIP_interfaceName}')
assert interfaceValue == context.expand('${#TestSuite#NDIP_interfaceValue}')
assert serviceStatus == context.expand('${#TestSuite#NDIP_serviceStatus}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:name'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name18}') 
	     break 	
	}
	counter++
}
counter = 0
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:value'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value18}') 
	     break 	
	}
	counter++
}
  // Variable for the parsing of elements with value in date format  
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.S'Z'");  
      
    // Variables for comparison and current date  
    Date currentDate = new Date()  
    Date cmpDate  
      
    // Store the parsed date in date type variable used for comparison  
    cmpDate = date.parse(lastConnectiondate)  
      
    // Compare dates till month since second value may change.  
    log.info "Year : " + cmpDate.getYear() + " == " + currentDate.getYear()  
    log.info "Month : " + cmpDate.getMonth() + " == " + currentDate.getMonth()  
    log.info "Date : " + cmpDate.getDate() + " == " + currentDate.getDate()  
    log.info "Hours : " + cmpDate.getHours() + " == " + currentDate.getHours()  
    log.info "Minutes : " + cmpDate.getMinutes() + " == " + currentDate.getMinutes()  
      
      
    assert cmpDate.getYear() == currentDate.getYear()  
    assert cmpDate.getMonth() == currentDate.getMonth()  
    assert cmpDate.getDate() == currentDate.getDate()  
      
    // Assertion to check the element returned has correct date format.  
    assert cmpDate.getHours() == currentDate.getHours()  
    assert cmpDate.getMinutes() == currentDate.getMinutes()  
</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by AID)" id="f436f009-efc9-473e-b6b3-8dcdfac0dd13"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by AID)" id="790683ec-fdcd-42f3-9e8a-c2f98a85ea34"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_nominal}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1907bb92-e8cf-4f06-ba6c-6d99e6f0f9f8"/><con:assertion type="Schema Compliance" id="8179b662-c50f-442e-97cf-b447869ef834"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="5909e318-ed69-4690-85b5-1383e38f7de3"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
//def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def firstConnectiondate = responseHolder.getNodeValue("//ns1:firstConnectiondate")
def lastConnectiondate = responseHolder.getNodeValue("//ns1:lastConnectiondate")
log.info lastConnectiondate
def deviceBrand = responseHolder.getNodeValue("//ns1:deviceBrand")
def deviceName = responseHolder.getNodeValue("//ns1:deviceName")
def os = responseHolder.getNodeValue("//ns1:os")
def osVersion = responseHolder.getNodeValue("//ns1:osVersion")
def softwareVersion = responseHolder.getNodeValue("//ns1:softwareVersion")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def interfaceName = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:name")
def interfaceValue = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:value")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")
def counter = 0


// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#AID_nominal}')
//assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#NDIP_authEmail}')
assert connectionMode == context.expand('${#TestSuite#NDIP_connectionMode}')
assert ipAddress == context.expand('${#TestSuite#IPAddress}')
assert firstConnectiondate == context.expand('${#TestSuite#firstConnectionDate}')
assert deviceBrand == context.expand('${#TestSuite#deviceBrand}')
assert deviceName == context.expand('${#TestSuite#deviceName}')
assert os == context.expand('${#TestSuite#AID_nominal_OS}')
assert osVersion == context.expand('${#TestSuite#osVersion}')
assert softwareVersion == context.expand('${#TestSuite#AID_nominal_softwareVersion}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert interfaceName == context.expand('${#TestSuite#NDIP_interfaceName}')
assert interfaceValue == context.expand('${#TestSuite#AID_nominal_InterfaceValue}')
assert serviceStatus == context.expand('${#TestSuite#NDIP_serviceStatus}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:name'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name18}') 
	     break 	
	}
	counter++
}
counter = 0
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:value'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#AID_parameter_value3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#AID_parameter_value4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#AID_parameter_value3}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#AID_parameter_value3}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value18}') 
	     break 	
	}
	counter++
}
  // Variable for the parsing of elements with value in date format  
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S'Z'");  
      
    // Variables for comparison and current date  
    Date currentDate = new Date()  
    Date cmpDate  
      
    // Store the parsed date in date type variable used for comparison  
    cmpDate = date.parse(lastConnectiondate)  
      
    // Compare dates till month since second value may change.  
    log.info "Year : " + cmpDate.getYear() + " == " + currentDate.getYear()  
    log.info "Month : " + cmpDate.getMonth() + " == " + currentDate.getMonth()  
    log.info "Date : " + cmpDate.getDate() + " == " + currentDate.getDate()  
    log.info "Hours : " + cmpDate.getHours() + " == " + currentDate.getHours()  
    log.info "Minutes : " + cmpDate.getMinutes() + " == " + currentDate.getMinutes()  
      
      
    assert cmpDate.getYear() == currentDate.getYear()  
    assert cmpDate.getMonth() == currentDate.getMonth()  
    assert cmpDate.getDate() == currentDate.getDate()  
      
    // Assertion to check the element returned has correct date format.  
    assert cmpDate.getHours() == currentDate.getHours()  
    assert cmpDate.getMinutes() == currentDate.getMinutes()  
</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by IMPI)" id="6f4cdd4f-c09d-442c-a62e-489b33c51b9c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by IMPI)" id="6730362b-7f06-4647-b3a4-bf60161dd9bd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#Nominal_IMPI}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2909d0a4-04dc-4302-8c82-d7b93ff5899f"/><con:assertion type="Schema Compliance" id="c8b5a69c-7046-45cf-93d3-5772380462b7"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="eae6358d-da68-4e2f-936e-ba71a8dc2329"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def firstConnectiondate = responseHolder.getNodeValue("//ns1:firstConnectiondate")
def lastConnectiondate = responseHolder.getNodeValue("//ns1:lastConnectiondate")
log.info lastConnectiondate
def deviceBrand = responseHolder.getNodeValue("//ns1:deviceBrand")
def deviceName = responseHolder.getNodeValue("//ns1:deviceName")
def os = responseHolder.getNodeValue("//ns1:os")
def osVersion = responseHolder.getNodeValue("//ns1:osVersion")
def softwareVersion = responseHolder.getNodeValue("//ns1:softwareVersion")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def interfaceName = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:name")
def interfaceValue = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:value")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")
def counter = 0


// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#IMPI_nominal_accountID}')
assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#NDIP_authEmail}')
assert connectionMode == context.expand('${#TestSuite#NDIP_connectionMode}')
assert ipAddress == context.expand('${#TestSuite#IPAddress}')
assert firstConnectiondate == context.expand('${#TestSuite#firstConnectionDate}')
assert deviceBrand == context.expand('${#TestSuite#deviceBrand}')
assert deviceName == context.expand('${#TestSuite#deviceName}')
assert os == context.expand('${#TestSuite#IMPI_nominal_os}')
assert osVersion == context.expand('${#TestSuite#osVersion}')
assert softwareVersion == context.expand('${#TestSuite#IMPI_nominal_softwareVersion}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert interfaceName == context.expand('${#TestSuite#NDIP_interfaceName}')
assert interfaceValue == context.expand('${#TestSuite#IMPI_nominal_interfaceValue}')
assert serviceStatus == context.expand('${#TestSuite#NDIP_serviceStatus}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:name'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name18}') 
	     break 	
	}
	counter++
}
counter = 0
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:value'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value3}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value3}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value18}') 
	     break 	
	}
	counter++
}
  // Variable for the parsing of elements with value in date format  
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.S'Z'");  
      
    // Variables for comparison and current date  
    Date currentDate = new Date()  
    Date cmpDate  
      
    // Store the parsed date in date type variable used for comparison  
    cmpDate = date.parse(lastConnectiondate)  
      
    // Compare dates till month since second value may change.  
    log.info "Year : " + cmpDate.getYear() + " == " + currentDate.getYear()  
    log.info "Month : " + cmpDate.getMonth() + " == " + currentDate.getMonth()  
    log.info "Date : " + cmpDate.getDate() + " == " + currentDate.getDate()  
    log.info "Hours : " + cmpDate.getHours() + " == " + currentDate.getHours()  
    log.info "Minutes : " + cmpDate.getMinutes() + " == " + currentDate.getMinutes()  
      
      
    assert cmpDate.getYear() == currentDate.getYear()  
    assert cmpDate.getMonth() == currentDate.getMonth()  
    assert cmpDate.getDate() == currentDate.getDate()  
      
    // Assertion to check the element returned has correct date format.  
    assert cmpDate.getHours() == currentDate.getHours()  
    assert cmpDate.getMinutes() == currentDate.getMinutes()  
</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid AID)" id="69782eba-84f8-405f-9368-7cca2af94466"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid AID)" id="e4741b20-5053-49c2-b2c8-09bbb4c11404"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6c164a0d-6c11-454d-bcac-c1fcb8106ed7"/><con:assertion type="Schema Compliance" id="c4acbab4-5f3b-49fd-bf7a-6869d816f316"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a1b55521-2a77-4618-a5b2-a976127bf704"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidAID}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid NDIP)" id="752a4c7e-1dbd-4669-b713-bf5c477d1934"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid NDIP)" id="28f012ef-5926-413d-a5d2-1e41a52a1c0b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#NDIP_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5c151aae-e501-4c9e-9d5d-fa6f52d66cec"/><con:assertion type="Schema Compliance" id="3139a748-dcb7-4e76-988e-ef36cc682ce2"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="98edf975-8a13-4d94-9523-cbf43d84b5d5"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidNDIP}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid IMPI)" id="c7f96c1c-cef6-4476-85d1-2d6ca644df6c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid IMPI)" id="33f264f8-e704-40cf-aa44-ce08955c6f69"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2589c080-329b-47fd-bf3c-01f81ffcf844"/><con:assertion type="Schema Compliance" id="0d741924-085d-4a1d-b2ad-0ec0a925a37e"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="b84d8777-9905-446d-9547-0c87b6a12be0"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidIMPI}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid BU)" id="52df36b5-f894-4d53-abf9-cc2dda9a00c5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid BU)" id="5139b9f3-83ad-4a50-9d9e-887210a29296"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#BU_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8ae30dd5-edb2-4d9b-957b-0b5617238a1f"/><con:assertion type="Schema Compliance" id="bb7814da-47ae-4fde-9843-1a780bf230c5"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a3ff5cec-406b-47c5-940a-8ef687e70d11"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidBU}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid CPE)" id="237c3f81-fbaf-4ab4-962f-555e183e5961"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid CPE)" id="4728dee0-1d6e-4806-9e96-0f0326ab1984"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#CPE_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a0968d53-222e-40f6-bc0c-faea869c6e27"/><con:assertion type="Schema Compliance" id="04d63832-2d9b-432f-9708-bf9742031a01"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="edb6e5c6-cc17-4b20-a4bf-c1a848769cda"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidCPE}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -200(CustomerNotFound)" id="84377539-026c-41e8-a62a-598ccda85dd5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -200(CustomerNotFound)" id="b27eff08-3d71-4980-b726-8de0b6c78ac7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_noCustomer}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1e08bda1-7edf-49ae-b364-fe5e70ccbfd6"/><con:assertion type="Schema Compliance" id="7571bc99-d2e3-4b83-bc38-9e3b1db838cd"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="274192ed-5add-447c-bf7a-c792ef346fe6"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_CustomerNotFound}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_CustomerNotFound}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Unknown Error)" id="ad959361-e90e-4272-8cca-1fc4b6f8a16f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Unknown Error)" id="650a1030-dbf9-4f02-8c9c-681f40048254"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#Unknown_AID}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="562019f2-a91b-46d0-9a33-312a69362429"/><con:assertion type="Schema Compliance" id="587e3139-4b6c-47bd-9064-1c3bd6d5008d"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="7c8e74d8-1cc4-4971-805b-380375966680"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_FCPEUnreachable}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_FCPEUnreachable}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Stop services at port" id="bccd5af5-e54e-4f94-947f-067749437f42"><con:settings/><con:config><script>import com.orange.linux.SwitchUser;
	SwitchUser sw = new SwitchUser();
	def portValue = context.expand('${#TestSuite#Port}');
	def serverValue = context.expand('${#TestSuite#Server}');
	def port = Integer.parseInt(portValue);
	sw.stopPort(serverValue,port);</script></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -103(FCPEsoft Unreachable)" id="af5606e9-a479-45c0-94a5-820598a1465b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -103(FCPEsoft Unreachable)" id="9cba002d-15a1-402c-bad4-e9d934e19451"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#Unreachable_AID}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="83cba0b2-8dff-4d9a-a43f-3fc5ebb8ab3e"/><con:assertion type="Schema Compliance" id="894adf6b-a4ed-4de6-88d5-e76fdd8ac610"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76024691-e757-4a30-bd0d-c0dd3f149c5e"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_103}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_unreachable}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Start services at port" id="43f850cf-7c68-4795-8ef4-96eafe760d97"><con:settings/><con:config><script>import com.orange.linux.SwitchUser;
	SwitchUser sw = new SwitchUser();
	def portValue = context.expand('${#TestSuite#Port}');
	def serverValue = context.expand('${#TestSuite#Server}');
	def port = Integer.parseInt(portValue);
	sw.startPort(serverValue,port);</script></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(Invalid AID)" id="c56a6df4-12c1-416d-9f6b-0bb4115b667c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(Invalid AID)" id="a8dce9fc-3a48-4db2-b186-a7c377f92867"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_101}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="57b92785-28de-4f8e-a641-555e7b6f11ff"/><con:assertion type="Schema Compliance" id="e098b354-0881-4452-9dfc-b2792703234c"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f67379dc-f292-4205-b401-e6fc33157b84"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_BadFormat}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_Invalid_AID}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(Invalid NDIP)" id="d1b63910-9c60-408b-82ef-413800138254"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(Invalid NDIP)" id="2668a9f1-9149-44d9-ab12-85c2e2bb1fc2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_NDIP}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#NDIP_100}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2c848b35-5038-4f47-8abc-4b48defa48b5"/><con:assertion type="Schema Compliance" id="96284058-c59b-4823-85d3-e0984a2255a1"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="007b0b47-7007-491d-8ee4-c2357722acf3"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_BadFormat}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_Invalid_NDIP}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(Invalid IMPI)" id="ebffc5b4-8408-4e7f-8f46-e1b5bbc7d4ac"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(Invalid IMPI)" id="e8fe1879-e72f-4dce-9613-c7de852a47dc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_100}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="54f4428c-a6ab-421d-8ae9-58f47beb2fde"/><con:assertion type="Schema Compliance" id="7b46ee97-5a21-4c80-89e1-5c15d017bcd9"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="bd47aff5-741d-4a4e-b7ba-f9c7cdf7a4c7"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_BadFormat}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_Invalid_IMPI}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by AID-ServiceStatus 0)" id="c37059c5-4a83-4de5-b6f9-c6eafa535154"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by AID-ServiceStatus 0)" id="6caad97f-d6d6-468f-9f0d-49aecb133264"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_ServiceStatus0}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="90d33727-444d-4d69-ad40-ef891d0eb37f"/><con:assertion type="Schema Compliance" id="f7f5be8c-1870-460b-8096-760f2bf596d3"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="d5dde6ec-247e-4654-b89f-a41e124393c0"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#AID_ServiceStatus0}')
assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#AID_authEmail}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert serviceStatus == context.expand('${#TestSuite#SrviceStatus0}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')

 </scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter IMPI)" id="626a2cd8-c734-4846-a065-922d4e576571"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter IMPI)" id="bb1a7526-2bb4-4e76-8614-02331b19798e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
        <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <!--<get:type>IMPI</get:type>
-->
            <!--Optional:-->
            <!--<get:value>nimisha.gupta@orange-multimedia.fr</get:value>
-->
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="87d00f54-9c0a-4f49-a8c3-26e11371c708"/><con:assertion type="Schema Compliance" id="ea2fa708-a85b-47e8-9486-184e687d69f9"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="878d3170-67a8-4847-8551-11e59a13e7c8"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingInput}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter AID)" id="641a6f20-2f3c-4542-85ff-083582939bc0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter AID)" id="c0b538e4-b4a0-4be3-b43b-6695dbc0986d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <!--<get:type>AID</get:type>
-->
            <!--Optional:-->
            <!--<get:value>1234404091222</get:value>
-->
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="91c60874-9f89-471f-a655-9f681c3f5fb7"/><con:assertion type="Schema Compliance" id="bd8c555b-1de7-4c5f-8809-991325506c6d"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8d753799-38bd-4bc4-9cb4-0520453143f3"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingInput}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter NDIP)" id="9746df46-ee9f-4593-889d-5d91e4a0d6a8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter NDIP)" id="80f93bf7-b503-42a0-a314-2deee0f26371"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
        <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
             <!--<get:type>NDIP</get:type>
-->
            <!--Optional:-->
            <!--<get:value>1234404091222</get:value>
-->
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="48447d42-3528-4fd4-b37b-821c6a925f13"/><con:assertion type="Schema Compliance" id="ed65791c-c84a-451b-9388-0c76298f3374"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="7437fd7d-d304-4f9e-9732-c9df1c7387c5"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingInput}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter BU)" id="6688a992-ad1f-4d1f-9c4a-3157d2af9516"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter BU)" id="e01d4c90-2d84-4661-bf87-5b763553b1b0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit></get:businessUnit>
          <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_101}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a55935ae-451e-417a-b088-35932e563309"/><con:assertion type="Schema Compliance" id="5dcc840e-9550-4b1a-9315-ae02dae1b9fc"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="1ea03695-b8bc-48dc-af9d-0369cb1c4000"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingBU}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter CPETYPE)" id="a2b716e0-e271-4ed7-958d-cf9a7282cf74"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter CPETYPE)" id="772378ef-f424-4b40-92fb-2a8acb5c204b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType></get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b41d20f7-02e1-4020-977f-4fdbc172c7e5"/><con:assertion type="Schema Compliance" id="c041aba3-b475-4ea9-980c-ca0896229d89"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="7273fd9c-1ad0-42e5-b103-d1d9630740ec"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingCPE}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -401(IOSW.REQ.AUTORISATION_FAILURE)" id="b3023256-aa06-40d7-a0d4-c62bbeddb7bf"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -401(IOSW.REQ.AUTORISATION_FAILURE)" id="e64e4398-cca0-4058-a1b8-a4d960a56105"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>FR</get:businessUnit>
         <get:cpeType>SOFTPHONE</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>AID</get:type>
            <!--Optional:-->
            <get:value>123440481</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b4b00bd6-9ffa-47d9-b421-ce566cddd023"/><con:assertion type="Schema Compliance" id="02cc17af-77c9-409f-a707-65e8852b5e69"><con:configuration/></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -101(InvalidCutsomer type)" id="877904c7-b83e-4fc4-a081-f134b5cc3e62"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -101(InvalidCutsomer type)" id="4c684d27-1e1b-4ae6-b56e-eff020934a14"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>HHH</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9bf3d2f0-70f1-4210-aa76-9e710681097f"/><con:assertion type="Schema Compliance" id="cdd5b939-8aae-4e31-afba-0ab542818f8b"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="12722229-18d9-41e3-b494-4f56db209a36"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-101"
assert returnFaultMessage == "Invalid input parameter : customerId.type"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -101(Invalid BU)" id="ab752ed7-c640-499e-b5e1-446bf3ac9eec"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -101(Invalid BU)" id="25e05e32-a1e4-43ec-904f-bfd479862b27"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>SP</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="23e53093-4561-4713-a0c6-811053ce318f"/><con:assertion type="Schema Compliance" id="063baa49-cc16-4092-b7eb-3a7c4325ccc8"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="be4f9bb1-2c7d-418d-b283-6cdbd0b387c8"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-101"
assert returnFaultMessage == "Invalid input parameter : businessUnit"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(BAD Format cpeType)" id="1d849af2-c680-41af-9f86-9a5e917300cb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(BAD Format cpeType)" id="aa601092-0324-4cd8-82f7-c1c5ea007a68"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>FR</get:businessUnit>
         <get:cpeType>MyDeviceWhichIsSoftPhone!</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e449f0df-fe81-4386-870d-d4a3c3c9485f"/><con:assertion type="Schema Compliance" id="f9c7bd71-5d8f-4cd5-91ed-0bc0610723bb"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="4641c73a-797a-4a5c-b081-b9a8aa414500"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-100"
assert returnFaultMessage == "Bad input data format : cpeType"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(BAD Format BU)" id="93db8cb6-b0ff-47f5-a9ea-368dbf7ab42c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(BAD Format BU)" id="40acdcb7-12ff-4f1b-8d18-e8b55e9bbdc7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>89</get:businessUnit>
         <get:cpeType>softPhone</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8f7f3aea-17c7-4c3b-b615-ab843476ffa6"/><con:assertion type="Schema Compliance" id="074a1906-033e-4438-8f39-5d81181fe3ff"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="9b86f8da-6c0c-4762-9be0-1b55e62b7721"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-100"
assert returnFaultMessage == "Bad input data format : businessUnit"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -103(FCPESOFT(-7))" id="29b3c147-c5f2-4f11-8e49-227eb5b952ba"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -103(FCPESOFT(-7))" id="fe0d6385-144b-4feb-b990-5d8aed450f80"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#notreachable_AID}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="d2733fcb-2921-4329-9a78-4aff4497bf80"/><con:assertion type="Schema Compliance" id="05c9c154-28e4-4d0e-9630-0c4d44f4bfa1"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="15df9780-4889-42fa-8841-a20824eabaf0"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_103}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_unreachable}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>BU_FR</con:name><con:value>FR</con:value></con:property><con:property><con:name>CPETYPE</con:name><con:value>SOFTPHONE</con:value></con:property><con:property><con:name>ID_TYPE_NDIP</con:name><con:value>NDIP</con:value></con:property><con:property><con:name>NDIP_Nominal</con:name><con:value>+33155886791</con:value></con:property><con:property><con:name>NDIP_nominal_accountId</con:name><con:value>123440402</con:value></con:property><con:property><con:name>NDIP_nominal_offer</con:name><con:value>Voipsoftphone</con:value></con:property><con:property><con:name>NDIP_authEmail</con:name><con:value>nimisha.gupta@orange.com</con:value></con:property><con:property><con:name>NDIP_connectionMode</con:name><con:value>NOMINAL</con:value></con:property><con:property><con:name>IPAddress</con:name><con:value>10.239.199.1</con:value></con:property><con:property><con:name>firstConnectionDate</con:name><con:value>2008-06-16T09:56:26.377Z</con:value></con:property><con:property><con:name>deviceBrand</con:name><con:value>Samsung</con:value></con:property><con:property><con:name>deviceName</con:name><con:value>GT-I9000</con:value></con:property><con:property><con:name>os</con:name><con:value>G0R0C1</con:value></con:property><con:property><con:name>osVersion</con:name><con:value>2.3.6</con:value></con:property><con:property><con:name>softwareVersion</con:name><con:value>G0R0C1</con:value></con:property><con:property><con:name>NDIP_serviceType</con:name><con:value>VOIP_SIP</con:value></con:property><con:property><con:name>NDIP_interfaceName</con:name><con:value>VMPAL</con:value></con:property><con:property><con:name>NDIP_interfaceValue</con:name><con:value>2</con:value></con:property><con:property><con:name>NDIP_serviceStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>NDIP_parameter_name1</con:name><con:value>authentication</con:value></con:property><con:property><con:name>NDIP_parameter_name2</con:name><con:value>IMPI</con:value></con:property><con:property><con:name>NDIP_parameter_name3</con:name><con:value>NDIP</con:value></con:property><con:property><con:name>NDIP_parameter_name4</con:name><con:value>URISIP</con:value></con:property><con:property><con:name>NDIP_parameter_name5</con:name><con:value>OutboundProxy</con:value></con:property><con:property><con:name>NDIP_parameter_name6</con:name><con:value>useDefaultOutboundProxyPort</con:value></con:property><con:property><con:name>NDIP_parameter_name7</con:name><con:value>LocalPortNumber</con:value></con:property><con:property><con:name>NDIP_parameter_name8</con:name><con:value>RegistrationDelay</con:value></con:property><con:property><con:name>NDIP_parameter_name9</con:name><con:value>MWIEnable</con:value></con:property><con:property><con:name>NDIP_parameter_name10</con:name><con:value>CallWaitingEnable</con:value></con:property><con:property><con:name>NDIP_parameter_name11</con:name><con:value>International</con:value></con:property><con:property><con:name>NDIP_parameter_name12</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>NDIP_parameter_name13</con:name><con:value>Premium</con:value></con:property><con:property><con:name>NDIP_parameter_name14</con:name><con:value>UserAgentDomain</con:value></con:property><con:property><con:name>NDIP_parameter_name15</con:name><con:value>VoiceMailBoxDomain</con:value></con:property><con:property><con:name>NDIP_parameter_name16</con:name><con:value>UserName</con:value></con:property><con:property><con:name>NDIP_parameter_name17</con:name><con:value>UserFirstName</con:value></con:property><con:property><con:name>NDIP_parameter_name18</con:name><con:value>SiPUserAgent</con:value></con:property><con:property><con:name>RC_OK</con:name><con:value>1</con:value></con:property><con:property><con:name>RFM_OK</con:name><con:value>RESULT OK</con:value></con:property><con:property><con:name>NDIP_parameter_value1</con:name><con:value>*****</con:value></con:property><con:property><con:name>NDIP_parameter_value2</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value3</con:name><con:value>+33123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value4</con:name><con:value>SIP:+33123440402@orange.com</con:value></con:property><con:property><con:name>NDIP_parameter_value5</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value6</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value7</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value8</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value9</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>NDIP_parameter_value10</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>NDIP_parameter_value11</con:name><con:value>+33123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value12</con:name><con:value>+33123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value13</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>NDIP_parameter_value14</con:name><con:value>ad.francetelecom.fr</con:value></con:property><con:property><con:name>NDIP_parameter_value15</con:name><con:value>ad.francetelecom.fr</con:value></con:property><con:property><con:name>NDIP_parameter_value16</con:name><con:value>Nimisha Gupta</con:value></con:property><con:property><con:name>NDIP_parameter_value17</con:name><con:value>Nimisha</con:value></con:property><con:property><con:name>NDIP_parameter_value18</con:name><con:value>OrangeSoftVersion-055-L01-A40</con:value></con:property><con:property><con:name>AID_nominal</con:name><con:value>123440401</con:value></con:property><con:property><con:name>AID_nominal_OS</con:name><con:value>G0R0C0</con:value></con:property><con:property><con:name>AID_nominal_softwareVersion</con:name><con:value>G0R0C0</con:value></con:property><con:property><con:name>AID_nominal_InterfaceValue</con:name><con:value>1</con:value></con:property><con:property><con:name>AID_parameter_value2</con:name><con:value>FTI/123440401</con:value></con:property><con:property><con:name>AID_parameter_value3</con:name><con:value>+33123440401</con:value></con:property><con:property><con:name>AID_parameter_value4</con:name><con:value>SIP:+33123440401@orange.com</con:value></con:property><con:property><con:name>IMPI_nominal_accountID</con:name><con:value>123440403</con:value></con:property><con:property><con:name>IMPI_nominal_os</con:name><con:value>G0R0C2</con:value></con:property><con:property><con:name>IMPI_nominal_softwareVersion</con:name><con:value>G0R0C2</con:value></con:property><con:property><con:name>IMPI_nominal_interfaceValue</con:name><con:value>3</con:value></con:property><con:property><con:name>IMPI_parameter_value2</con:name><con:value>FTI/123440403</con:value></con:property><con:property><con:name>IMPI_parameter_value3</con:name><con:value>+33123440403</con:value></con:property><con:property><con:name>IMPI_parameter_value4</con:name><con:value>SIP:+33123440403@orange.com</con:value></con:property><con:property><con:name>RC_InvalidReturnType</con:name><con:value>-104</con:value></con:property><con:property><con:name>RFM_InvalidAID</con:name><con:value>Undefined FCPESoft error : Invalid AID</con:value></con:property><con:property><con:name>RFM_InvalidNDIP</con:name><con:value>Undefined FCPESoft error : Invalid NDIP</con:value></con:property><con:property><con:name>RFM_InvalidIMPI</con:name><con:value>Undefined FCPESoft error : Invalid IMPI</con:value></con:property><con:property><con:name>RFM_InvalidBU</con:name><con:value>Undefined FCPESoft error : Invalid business unit</con:value></con:property><con:property><con:name>RFM_InvalidCPE</con:name><con:value>Undefined FCPESoft error : Invalid CPEType</con:value></con:property><con:property><con:name>RC_CustomerNotFound</con:name><con:value>-200</con:value></con:property><con:property><con:name>RFM_CustomerNotFound</con:name><con:value>requested customer does not exist</con:value></con:property><con:property><con:name>RC_FCPEUnreachable</con:name><con:value>-104</con:value></con:property><con:property><con:name>RFM_FCPEUnreachable</con:name><con:value>Undefined FCPESoft error : Unknown error</con:value></con:property><con:property><con:name>RC_InvalidIdType</con:name><con:value>-101</con:value></con:property><con:property><con:name>RFM_Invalid_AID</con:name><con:value>Bad input data format : customerId (type:AID)</con:value></con:property><con:property><con:name>RFM_Invalid_NDIP</con:name><con:value>Bad input data format : customerId (type:NDIP)</con:value></con:property><con:property><con:name>RFM_Invalid_IMPI</con:name><con:value>Bad input data format : customerId (type:IMPI)</con:value></con:property><con:property><con:name>AID_ServiceStatus0</con:name><con:value>123440480</con:value></con:property><con:property><con:name>AID_authEmail</con:name><con:value>nimisha.gupta1@orange.com</con:value></con:property><con:property><con:name>SrviceStatus0</con:name><con:value>0</con:value></con:property><con:property><con:name>RC_MissingInput</con:name><con:value>-102</con:value></con:property><con:property><con:name>RFM_MissingInput</con:name><con:value>Missing input parameter :  customerId</con:value></con:property><con:property><con:name>RFM_MissingBU</con:name><con:value>Missing input parameter :  businessUnit</con:value></con:property><con:property><con:name>RFM_MissingCPE</con:name><con:value>Missing input parameter :  cpeType</con:value></con:property><con:property><con:name>ID_Type_AID</con:name><con:value>AID</con:value></con:property><con:property><con:name>ID_Type_IMPI</con:name><con:value>IMPI</con:value></con:property><con:property><con:name>Nominal_IMPI</con:name><con:value>a1243f@orange-multimedia.fr</con:value></con:property><con:property><con:name>AID_104</con:name><con:value>123440404</con:value></con:property><con:property><con:name>NDIP_104</con:name><con:value>123440405</con:value></con:property><con:property><con:name>IMPI_104</con:name><con:value>123440406</con:value></con:property><con:property><con:name>BU_104</con:name><con:value>123440407</con:value></con:property><con:property><con:name>CPE_104</con:name><con:value>123440408</con:value></con:property><con:property><con:name>AID_noCustomer</con:name><con:value>123440499</con:value></con:property><con:property><con:name>Unknown_AID</con:name><con:value>123440409</con:value></con:property><con:property><con:name>Unreachable_AID</con:name><con:value>123440409</con:value></con:property><con:property><con:name>AID_101</con:name><con:value>1234404091222</con:value></con:property><con:property><con:name>NDIP_101</con:name><con:value>1234404091222</con:value></con:property><con:property><con:name>IMPI_101</con:name><con:value>nimisha.gupta@orange-multimedia.fr</con:value></con:property><con:property><con:name>RC_BadFormat</con:name><con:value>-100</con:value></con:property><con:property><con:name>RC_103</con:name><con:value>-103</con:value></con:property><con:property><con:name>RFM_unreachable</con:name><con:value>FCPESoft unreachable</con:value></con:property><con:property><con:name>notreachable_AID</con:name><con:value>123440482</con:value></con:property><con:property><con:name>NDIP_100</con:name><con:value>18888888888888888888888888888</con:value></con:property><con:property><con:name>IMPI_100</con:name><con:value>11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</con:value></con:property><con:property><con:name>Port</con:name><con:value>7031</con:value></con:property><con:property><con:name>Server</con:name><con:value>10.170.231.171</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>