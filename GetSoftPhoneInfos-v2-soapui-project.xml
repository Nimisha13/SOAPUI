<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetSoftPhoneInfos-v2" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" id="beb228ed-a5ad-429c-9485-5119915d51d2" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetSoftPhoneInfosSoapBinding" type="wsdl" bindingName="{http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2}GetSoftPhoneInfosSoapBinding" soapVersion="1_1" anonymous="optional" definition="file:/C:/Papyrus%20WS/WSDLs%20(2)/WSDLs/north/GetSoftPhoneInfos/v2/GetSoftPhoneInfos-v2.wsdl" id="31844cf5-af13-42b2-b200-efdf384c23af" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\C:\Papyrus%20WS\WSDLs%20(2)\WSDLs\north\GetSoftPhoneInfos\v2\GetSoftPhoneInfos-v2.wsdl"><con:part><con:url>file:\C:\Papyrus%20WS\WSDLs%20(2)\WSDLs\north\GetSoftPhoneInfos\v2\GetSoftPhoneInfos-v2.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2" xmlns:types="http://WSA.francetelecom.com/types/GetSoftPhoneInfos" xmlns:intf="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <schema elementFormDefault="qualified" targetNamespace="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2" xmlns="http://www.w3.org/2001/XMLSchema">
      <import schemaLocation="GetSoftPhoneInfos.xsd" namespace="http://WSA.francetelecom.com/types/GetSoftPhoneInfos"/>
    </schema>
  </wsdl:types>
  <wsdl:message name="getClientSOFTPHONEInfoRequest">
    <wsdl:part element="types:getClientSOFTPHONEInfo" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getClientSOFTPHONEInfoResponse">
    <wsdl:part element="types:getClientSOFTPHONEInfoResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="GetSoftPhoneInfos">
    <wsdl:operation name="getClientSOFTPHONEInfo">
      <wsdl:documentation>The getClientSOFTPHONEInfo operation allows to retrieve service and
				softphone information from a customer identifier, from an IP phone
				number or from a VOIP SIP login</wsdl:documentation>
      <wsdl:input message="intf:getClientSOFTPHONEInfoRequest" name="getClientSOFTPHONEInfoRequest"/>
      <wsdl:output message="intf:getClientSOFTPHONEInfoResponse" name="getClientSOFTPHONEInfoResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetSoftPhoneInfosSoapBinding" type="intf:GetSoftPhoneInfos">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getClientSOFTPHONEInfo">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getClientSOFTPHONEInfoRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getClientSOFTPHONEInfoResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetSoftPhoneInfosService">
    <wsdl:documentation>The GetSoftPhoneInfos service provides information on devices managed by
			the FCPEsoft platform</wsdl:documentation>
    <wsdl:port binding="intf:GetSoftPhoneInfosSoapBinding" name="GetSoftPhoneInfos">
      <wsdlsoap:address location="http://WSA.francetelecom.com/papyrusCustomerCareWS/services/GetSoftPhoneInfos-v2"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\Papyrus%20WS\WSDLs%20(2)\WSDLs\north\GetSoftPhoneInfos\v2\GetSoftPhoneInfos.xsd</con:url><con:content><![CDATA[<schema elementFormDefault="qualified" targetNamespace="http://WSA.francetelecom.com/types/GetSoftPhoneInfos" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:types="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
  <element name="getClientSOFTPHONEInfo">
    <complexType>
      <sequence>
        <element name="businessUnit" type="xsd:string"/>
        <element name="cpeType" type="xsd:string"/>
        <element name="customerId" type="types:CustomerIdV2"/>
        <element name="callContext" minOccurs="0" type="types:CallContextV2"/>
      </sequence>
    </complexType>
  </element>
  <complexType name="CustomerIdV2">
    <sequence>
      <element name="type" minOccurs="0" type="xsd:string"/>
      <element name="value" minOccurs="0" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="CallContextV2">
    <sequence>
      <element name="applicationParameter" minOccurs="0" type="xsd:string"/>
      <element name="logLevel" minOccurs="0" type="xsd:string"/>
      <element name="timing" minOccurs="0" type="xsd:string"/>
      <element name="userName" minOccurs="0" type="xsd:string"/>
      <element name="userPassword" minOccurs="0" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="ResponseContextV2">
    <sequence>
      <element name="returnCode" type="xsd:int"/>
      <element name="returnFaultMessage" type="xsd:string"/>
      <element name="responseTime" type="xsd:string"/>
      <element name="applicationResponse" type="xsd:string"/>
    </sequence>
  </complexType>
  <element name="getClientSOFTPHONEInfoResponse">
    <complexType>
      <sequence>
        <element name="getClientSOFTPHONEInfoReturn" type="types:GetClientSOFTPHONEInfoBeanV2"/>
      </sequence>
    </complexType>
  </element>
  <complexType name="CustomerInfoV2">
    <sequence>
      <element name="accountId" type="xsd:string"/>
      <element name="offer" type="xsd:string"/>
      <xsd:element name="authEmail" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="EquipmentV2">
    <sequence>
      <element name="connectionMode" minOccurs="0" type="xsd:string"/>
      <element name="ipAddress" minOccurs="0" type="xsd:string"/>
      <element name="firstConnectiondate" minOccurs="0" type="xsd:dateTime"/>
      <element name="lastConnectiondate" minOccurs="0" type="xsd:dateTime"/>
      <element name="deviceBrand" minOccurs="0" type="xsd:string"/>
      <element name="deviceName" minOccurs="0" type="xsd:string"/>
      <element name="os" minOccurs="0" type="xsd:string"/>
      <element name="osVersion" minOccurs="0" type="xsd:string"/>
      <element name="softwareVersion" minOccurs="0" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="ServiceV2">
    <sequence>
      <element name="type" type="xsd:string"/>
      <element name="interfaceStatusList" minOccurs="0" maxOccurs="unbounded" type="types:InterfaceStatusV2"/>
      <element name="serviceStatus" minOccurs="0" type="int"/>
      <element name="parameterList" minOccurs="0" maxOccurs="unbounded" type="types:ParametersV2"/>
    </sequence>
  </complexType>
  <complexType name="InterfaceStatusV2">
    <sequence>
      <element name="name" type="xsd:string"/>
      <element name="value" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="ParametersV2">
    <sequence>
      <element name="name" type="xsd:string"/>
      <element name="value" type="xsd:string"/>
    </sequence>
  </complexType>
  <complexType name="GetClientSOFTPHONEInfoBeanV2">
    <sequence>
      <element name="businessUnit" minOccurs="0" type="xsd:string"/>
      <element name="customer" minOccurs="0" type="types:CustomerInfoV2"/>
      <element name="equipmentList" minOccurs="0" maxOccurs="unbounded" type="types:EquipmentV2"/>
      <element name="serviceList" minOccurs="0" maxOccurs="unbounded" type="types:ServiceV2"/>
      <element name="responseContext" type="types:ResponseContextV2"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.170.194.214:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://10.170.194.215:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://10.170.194.216:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:endpoint>http://WSA.francetelecom.com/papyrusCustomerCareWS/services/GetSoftPhoneInfos-v2</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getClientSOFTPHONEInfo" bindingOperationName="getClientSOFTPHONEInfo" type="Request-Response" outputName="getClientSOFTPHONEInfoResponse" inputName="getClientSOFTPHONEInfoRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="0d894898-0468-4ed6-845b-06298196038e"><con:settings/><con:call name="Request 1" id="15dbc160-1b42-4554-ae4d-297d93976fa6"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://WSA.francetelecom.com/papyrusCustomerCareWS/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>?</get:businessUnit>
         <get:cpeType>?</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>?</get:type>
            <!--Optional:-->
            <get:value>?</get:value>
         </get:customerId>
         <!--Optional:-->
         <get:callContext>
            <!--Optional:-->
            <get:applicationParameter>?</get:applicationParameter>
            <!--Optional:-->
            <get:logLevel>?</get:logLevel>
            <!--Optional:-->
            <get:timing>?</get:timing>
            <!--Optional:-->
            <get:userName>?</get:userName>
            <!--Optional:-->
            <get:userPassword>?</get:userPassword>
         </get:callContext>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://WSA.francetelecom.com/wsdl/GetSoftPhoneInfos/v2/GetSoftPhoneInfos/getClientSOFTPHONEInfoRequest"/></con:call></con:operation></con:interface><con:testSuite name="GetSoftPhoneInfosSoapBinding TestSuite" id="b7d15aca-b483-4f30-8390-a3f3d2a67a9f"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientSOFTPHONEInfo TestCase" searchProperties="true" id="2cb828e1-3577-49e6-aa46-fcfbfcf97881" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Start Services at port 7031" id="3f0be7fe-c6e6-4182-b3ad-b1d4d39d7aa9"><con:settings/><con:config><script>import com.orange.linux.SwitchUser;
	SwitchUser sw = new SwitchUser();
	def portValue = context.expand('${#TestSuite#Port}');
	def serverValue = context.expand('${#TestSuite#Server}');
	def port = Integer.parseInt(portValue);
	sw.startPort(serverValue,port);
	log("Atishay Changes 1")</script></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by NDIP)" id="badcadf3-51e5-469a-9c9e-5ab4d7bb68d5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by NDIP)" id="a4b597a8-a3dd-411f-bedc-4cf6db4e4171"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_NDIP}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#NDIP_Nominal}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="523f9e7a-32d0-428e-befd-7c1bf74eb476"/><con:assertion type="Schema Compliance" id="c0955ce2-40be-416c-9d14-8df01b22937e"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="e2b8dc55-62e6-4f68-9b21-d32c37855c69"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def firstConnectiondate = responseHolder.getNodeValue("//ns1:firstConnectiondate")
def lastConnectiondate = responseHolder.getNodeValue("//ns1:lastConnectiondate")
log.info lastConnectiondate
def deviceBrand = responseHolder.getNodeValue("//ns1:deviceBrand")
def deviceName = responseHolder.getNodeValue("//ns1:deviceName")
def os = responseHolder.getNodeValue("//ns1:os")
def osVersion = responseHolder.getNodeValue("//ns1:osVersion")
def softwareVersion = responseHolder.getNodeValue("//ns1:softwareVersion")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def interfaceName = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:name")
def interfaceValue = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:value")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")
def counter = 0


// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#NDIP_nominal_accountId}')
assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#NDIP_authEmail}')
assert connectionMode == context.expand('${#TestSuite#NDIP_connectionMode}')
assert ipAddress == context.expand('${#TestSuite#IPAddress}')
assert firstConnectiondate == context.expand('${#TestSuite#firstConnectionDate}')
assert deviceBrand == context.expand('${#TestSuite#deviceBrand}')
assert deviceName == context.expand('${#TestSuite#deviceName}')
assert os == context.expand('${#TestSuite#os}')
assert osVersion == context.expand('${#TestSuite#osVersion}')
assert softwareVersion == context.expand('${#TestSuite#softwareVersion}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert interfaceName == context.expand('${#TestSuite#NDIP_interfaceName}')
assert interfaceValue == context.expand('${#TestSuite#NDIP_interfaceValue}')
assert serviceStatus == context.expand('${#TestSuite#NDIP_serviceStatus}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:name'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name18}') 
	     break 	
	}
	counter++
}
counter = 0
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:value'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value18}') 
	     break 	
	}
	counter++
}
  // Variable for the parsing of elements with value in date format  
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.S'Z'");  
      
    // Variables for comparison and current date  
    Date currentDate = new Date()  
    Date cmpDate  
      
    // Store the parsed date in date type variable used for comparison  
    cmpDate = date.parse(lastConnectiondate)  
      
    // Compare dates till month since second value may change.  
    log.info "Year : " + cmpDate.getYear() + " == " + currentDate.getYear()  
    log.info "Month : " + cmpDate.getMonth() + " == " + currentDate.getMonth()  
    log.info "Date : " + cmpDate.getDate() + " == " + currentDate.getDate()  
    log.info "Hours : " + cmpDate.getHours() + " == " + currentDate.getHours()  
    log.info "Minutes : " + cmpDate.getMinutes() + " == " + currentDate.getMinutes()  
      
      
    assert cmpDate.getYear() == currentDate.getYear()  
    assert cmpDate.getMonth() == currentDate.getMonth()  
    assert cmpDate.getDate() == currentDate.getDate()  
      
    // Assertion to check the element returned has correct date format.  
    assert cmpDate.getHours() == currentDate.getHours()  
    assert cmpDate.getMinutes() == currentDate.getMinutes()  
</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by AID)" id="caf02a59-b7f4-4e3a-8957-f353f77f1b71"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by AID)" id="6c3b7f68-1c2d-4fc5-96a3-35c1f6a2ecf3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_nominal}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9920dd57-e708-4971-bb07-a6cfd5273661"/><con:assertion type="Schema Compliance" id="2151e9c4-7a4c-4688-8865-3ef4d77cc243"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="be0eadc6-8e42-4428-81ac-133d12f71f38"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
//def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def firstConnectiondate = responseHolder.getNodeValue("//ns1:firstConnectiondate")
def lastConnectiondate = responseHolder.getNodeValue("//ns1:lastConnectiondate")
log.info lastConnectiondate
def deviceBrand = responseHolder.getNodeValue("//ns1:deviceBrand")
def deviceName = responseHolder.getNodeValue("//ns1:deviceName")
def os = responseHolder.getNodeValue("//ns1:os")
def osVersion = responseHolder.getNodeValue("//ns1:osVersion")
def softwareVersion = responseHolder.getNodeValue("//ns1:softwareVersion")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def interfaceName = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:name")
def interfaceValue = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:value")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")
def counter = 0


// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#AID_nominal}')
//assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#NDIP_authEmail}')
assert connectionMode == context.expand('${#TestSuite#NDIP_connectionMode}')
assert ipAddress == context.expand('${#TestSuite#IPAddress}')
assert firstConnectiondate == context.expand('${#TestSuite#firstConnectionDate}')
assert deviceBrand == context.expand('${#TestSuite#deviceBrand}')
assert deviceName == context.expand('${#TestSuite#deviceName}')
assert os == context.expand('${#TestSuite#AID_nominal_OS}')
assert osVersion == context.expand('${#TestSuite#osVersion}')
assert softwareVersion == context.expand('${#TestSuite#AID_nominal_softwareVersion}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert interfaceName == context.expand('${#TestSuite#NDIP_interfaceName}')
assert interfaceValue == context.expand('${#TestSuite#AID_nominal_InterfaceValue}')
assert serviceStatus == context.expand('${#TestSuite#NDIP_serviceStatus}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:name'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name18}') 
	     break 	
	}
	counter++
}
counter = 0
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:value'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#AID_parameter_value3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#AID_parameter_value4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#AID_parameter_value2}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#AID_parameter_value3}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#AID_parameter_value3}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value18}') 
	     break 	
	}
	counter++
}
  // Variable for the parsing of elements with value in date format  
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S'Z'");  
      
    // Variables for comparison and current date  
    Date currentDate = new Date()  
    Date cmpDate  
      
    // Store the parsed date in date type variable used for comparison  
    cmpDate = date.parse(lastConnectiondate)  
      
    // Compare dates till month since second value may change.  
    log.info "Year : " + cmpDate.getYear() + " == " + currentDate.getYear()  
    log.info "Month : " + cmpDate.getMonth() + " == " + currentDate.getMonth()  
    log.info "Date : " + cmpDate.getDate() + " == " + currentDate.getDate()  
    log.info "Hours : " + cmpDate.getHours() + " == " + currentDate.getHours()  
    log.info "Minutes : " + cmpDate.getMinutes() + " == " + currentDate.getMinutes()  
      
      
    assert cmpDate.getYear() == currentDate.getYear()  
    assert cmpDate.getMonth() == currentDate.getMonth()  
    assert cmpDate.getDate() == currentDate.getDate()  
      
    // Assertion to check the element returned has correct date format.  
    assert cmpDate.getHours() == currentDate.getHours()  
    assert cmpDate.getMinutes() == currentDate.getMinutes()  
</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by IMPI)" id="f32db107-84b6-4bb3-ac0b-6d031347f4f7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by IMPI)" id="b361ad8f-43b7-4f2b-a336-25f26e4817ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#Nominal_IMPI}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b93ecff8-3f2d-4c5e-adbd-0c39b7a2df6e"/><con:assertion type="Schema Compliance" id="dbcf531b-47c2-4c7a-b0b8-27b885924b3f"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="52dd09c8-6d97-40b8-ad6b-ab6499792c03"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def firstConnectiondate = responseHolder.getNodeValue("//ns1:firstConnectiondate")
def lastConnectiondate = responseHolder.getNodeValue("//ns1:lastConnectiondate")
log.info lastConnectiondate
def deviceBrand = responseHolder.getNodeValue("//ns1:deviceBrand")
def deviceName = responseHolder.getNodeValue("//ns1:deviceName")
def os = responseHolder.getNodeValue("//ns1:os")
def osVersion = responseHolder.getNodeValue("//ns1:osVersion")
def softwareVersion = responseHolder.getNodeValue("//ns1:softwareVersion")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def interfaceName = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:name")
def interfaceValue = responseHolder.getNodeValue("//ns1:serviceList/ns1:interfaceStatusList/ns1:value")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")
def counter = 0


// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#IMPI_nominal_accountID}')
assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#NDIP_authEmail}')
assert connectionMode == context.expand('${#TestSuite#NDIP_connectionMode}')
assert ipAddress == context.expand('${#TestSuite#IPAddress}')
assert firstConnectiondate == context.expand('${#TestSuite#firstConnectionDate}')
assert deviceBrand == context.expand('${#TestSuite#deviceBrand}')
assert deviceName == context.expand('${#TestSuite#deviceName}')
assert os == context.expand('${#TestSuite#IMPI_nominal_os}')
assert osVersion == context.expand('${#TestSuite#osVersion}')
assert softwareVersion == context.expand('${#TestSuite#IMPI_nominal_softwareVersion}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert interfaceName == context.expand('${#TestSuite#NDIP_interfaceName}')
assert interfaceValue == context.expand('${#TestSuite#IMPI_nominal_interfaceValue}')
assert serviceStatus == context.expand('${#TestSuite#NDIP_serviceStatus}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:name'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name5}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name6}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name7}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name8}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name11}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name12}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_name18}') 
	     break 	
	}
	counter++
}
counter = 0
for( node in responseHolder['//ns1:serviceList/ns1:parameterList/ns1:value'] )
{
	switch (counter)
	{
	   case "0":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value1}')
	     break
	   case "1":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}') 
	     break 	
	   case "2":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value3}')
	     break
	   case "3":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value4}') 
	     break 	
	   case "4":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}')
	     break
	   case "5":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}') 
	     break 	
	   case "6":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}')
	     break
	   case "7":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value2}') 
	     break 	
	   case "8":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value9}')
	     break
	   case "9":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value10}') 
	     break 	
	   case "10":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value3}')
	     break
	   case "11":
	     assert node==context.expand('${#TestSuite#IMPI_parameter_value3}') 
	     break 	
	   case "12":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value13}')
	     break
	   case "13":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value14}') 
	     break 	
	   case "14":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value15}')
	     break
	   case "15":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value16}') 
	     break 	
	   case "16":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value17}')
	     break
	   case "17":
	     assert node==context.expand('${#TestSuite#NDIP_parameter_value18}') 
	     break 	
	}
	counter++
}
  // Variable for the parsing of elements with value in date format  
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss.S'Z'");  
      
    // Variables for comparison and current date  
    Date currentDate = new Date()  
    Date cmpDate  
      
    // Store the parsed date in date type variable used for comparison  
    cmpDate = date.parse(lastConnectiondate)  
      
    // Compare dates till month since second value may change.  
    log.info "Year : " + cmpDate.getYear() + " == " + currentDate.getYear()  
    log.info "Month : " + cmpDate.getMonth() + " == " + currentDate.getMonth()  
    log.info "Date : " + cmpDate.getDate() + " == " + currentDate.getDate()  
    log.info "Hours : " + cmpDate.getHours() + " == " + currentDate.getHours()  
    log.info "Minutes : " + cmpDate.getMinutes() + " == " + currentDate.getMinutes()  
      
      
    assert cmpDate.getYear() == currentDate.getYear()  
    assert cmpDate.getMonth() == currentDate.getMonth()  
    assert cmpDate.getDate() == currentDate.getDate()  
      
    // Assertion to check the element returned has correct date format.  
    assert cmpDate.getHours() == currentDate.getHours()  
    assert cmpDate.getMinutes() == currentDate.getMinutes()  
</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid AID)" id="94e0032c-f32c-4093-8a21-a56695ed09ef"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid AID)" id="9e22391a-6778-49c0-aeb4-520e1f5bb0d9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="7fd7fd67-0103-4b0d-9ada-534f79d6c9ff"/><con:assertion type="Schema Compliance" id="fbf2314e-e9e0-4206-8e1e-131d17b8ad7c"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="d29d0f0a-29fe-43d6-a153-e44423f00d9a"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidAID}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid NDIP)" id="8b7063af-49f2-4631-ab8e-3abcff3dd94f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid NDIP)" id="cac42bb2-0874-414f-8590-5cdda491ea02"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#NDIP_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="2d108bfd-4588-476e-bb5c-fff17d53cfff"/><con:assertion type="Schema Compliance" id="977ad8c6-3c84-4340-841d-becd0a0658c7"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a628e44c-589d-477e-9ce0-7e773e3c5572"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidNDIP}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid IMPI)" id="13a95264-c574-4d43-bf5a-f3d7c4a357a6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid IMPI)" id="fc62cf46-ab63-4310-ab6a-dfce38c6c32a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="287af6ad-a9a0-43cf-9b63-4a4ca0dbc55a"/><con:assertion type="Schema Compliance" id="99acfd94-9cf7-4d6d-a78c-c2f1a99f2bb9"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="04f1f259-1057-44cc-98bc-fac8eccce729"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidIMPI}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid BU)" id="2871be28-8cea-4bc1-b1ac-27d7393cd669"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid BU)" id="da2ed317-c641-4690-9955-b892fc08c923"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_TYPE_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#BU_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="43a03db3-7ddb-4174-b7f9-a5ff62b81fcc"/><con:assertion type="Schema Compliance" id="e85ce090-2380-4fed-9186-4f5b62b678bf"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="34ef0379-8b6c-4606-9853-7c13957de6e9"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidBU}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Invalid CPE)" id="360c7b2c-5fa7-4488-a7b7-5ae9ea19ffb6"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Invalid CPE)" id="15dde147-9ce2-4a1d-aeb9-4dbddb208770"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#CPE_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5d1e8b62-a29d-4ba8-a0a0-188c644d048d"/><con:assertion type="Schema Compliance" id="0eda5807-22e1-4df3-8bef-8b0d612a9776"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="e4c28fae-0b82-4067-923c-37d962316f99"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_InvalidReturnType}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_InvalidCPE}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -200(CustomerNotFound)" id="3ff74c99-10dd-4f14-a03d-15f8f3439708"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -200(CustomerNotFound)" id="918f0e4f-d668-4725-8690-e5986a3912ac"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_noCustomer}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="b45bbb46-e4e4-4523-8a5e-4a304033063e"/><con:assertion type="Schema Compliance" id="03961395-a904-4543-a406-ca52b99d5207"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="6cde0594-bf90-4126-93cb-949d84dfdd24"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_CustomerNotFound}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_CustomerNotFound}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -104(Unknown Error)" id="5af769d1-8033-4c88-a07b-ca21b136922d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -104(Unknown Error)" id="03b6422c-3b38-4006-9e7e-704dd957b9af"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#Unknown_AID}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e6ac6310-e4c3-4b25-b6e8-49fa81b8e694"/><con:assertion type="Schema Compliance" id="fcf423a8-ce33-43b2-9abe-fd3d0feb0b78"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="704156c7-2c6f-4c66-ba60-01784406ac78"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_FCPEUnreachable}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_FCPEUnreachable}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Stop services at port" id="0c5ad3e9-b5fb-477c-90d6-3572fc5a8d1c"><con:settings/><con:config><script>import com.orange.linux.SwitchUser;
	SwitchUser sw = new SwitchUser();
	def portValue = context.expand('${#TestSuite#Port}');
	def serverValue = context.expand('${#TestSuite#Server}');
	def port = Integer.parseInt(portValue);
	sw.stopPort(serverValue,port);</script></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -103(FCPEsoft Unreachable)" id="949cd565-1d3f-4738-9b85-f2112a5067f9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -103(FCPEsoft Unreachable)" id="d80ba6a4-44fa-4de1-bb1b-40ddbf17ecfe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#Unreachable_AID}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1adb92b0-a77e-46b7-8a2a-ea0bff57742e"/><con:assertion type="Schema Compliance" id="dbb3a651-7e83-4682-b010-f505b6c37674"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="788e9838-6211-46fa-a7c5-2f77011847a7"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_103}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_unreachable}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Start services at port" id="96d1aafa-1f1e-4f26-a562-64ec93283801"><con:settings/><con:config><script>import com.orange.linux.SwitchUser;
	SwitchUser sw = new SwitchUser();
	def portValue = context.expand('${#TestSuite#Port}');
	def serverValue = context.expand('${#TestSuite#Server}');
	def port = Integer.parseInt(portValue);
	sw.startPort(serverValue,port);</script></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(Invalid AID)" id="6d6ed84e-bcd6-4d89-acd5-0ef07f18da4c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(Invalid AID)" id="38e85a5a-81d4-4859-8760-18d0dcbad2e1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_101}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="fa6d1d0b-00eb-42c5-8e06-916bbdb6e29d"/><con:assertion type="Schema Compliance" id="3301110f-3444-4227-b079-b737918f66b7"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="49428e10-f46e-4154-8334-77289bda95ec"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_BadFormat}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_Invalid_AID}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(Invalid NDIP)" id="b0fad2b7-4e2a-4b2b-b8c2-ded1293159b2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(Invalid NDIP)" id="4b5d1282-f9d6-4fb4-9b1d-b7421eaa00b1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_NDIP}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#NDIP_100}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="966f9d27-92d7-4ce7-9c17-dd9baf6a05fa"/><con:assertion type="Schema Compliance" id="bd8bc990-b33d-40b0-9ae6-84cb571c0897"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="252ef098-2a5b-488e-9da8-77d53fc9ab17"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_BadFormat}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_Invalid_NDIP}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(Invalid IMPI)" id="291ceaf7-6356-4c4d-b00a-e4af051d0b4c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(Invalid IMPI)" id="0e41288c-fdc7-4d4d-9938-e9500ed290b2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_100}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9991bcc0-3398-472f-823d-410534143dbe"/><con:assertion type="Schema Compliance" id="7be520b8-dc78-4c3e-8f76-c6f590c3d06d"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="8a975a2e-9cba-46d5-bdd0-04648e907703"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_BadFormat}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_Invalid_IMPI}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Nominal(Search by AID-ServiceStatus 0)" id="8e3056e8-9dee-4e6b-9edd-57695d815322"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Nominal(Search by AID-ServiceStatus 0)" id="5d4c0f69-3e6b-48c3-8a06-19e97744b1fc"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_ServiceStatus0}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f88ba637-68e6-440d-929b-d16a3c7cc379"/><con:assertion type="Schema Compliance" id="52b8dc19-e305-4499-a534-c4b8a0101484"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="dcfa16d7-b76d-4ddd-befe-9735a39081da"><con:configuration><scriptText>// headers to be able to use various functions  
import java.util.*;  
import java.text.*;

// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables
def businessUnit = responseHolder.getNodeValue("//ns1:businessUnit")
def accountId = responseHolder.getNodeValue("//ns1:accountId")
def offer = responseHolder.getNodeValue("//ns1:offer")
def authEmail = responseHolder.getNodeValue("//ns1:authEmail")
def connectionMode = responseHolder.getNodeValue("//ns1:connectionMode")
def ipAddress = responseHolder.getNodeValue("//ns1:ipAddress")
def serviceType = responseHolder.getNodeValue("//ns1:serviceList/ns1:type")
def serviceStatus = responseHolder.getNodeValue("//ns1:serviceList/ns1:serviceStatus")
def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 
assert businessUnit == context.expand('${#TestSuite#BU_FR}')
assert accountId == context.expand('${#TestSuite#AID_ServiceStatus0}')
assert offer == context.expand('${#TestSuite#NDIP_nominal_offer}')
assert authEmail == context.expand('${#TestSuite#AID_authEmail}')
assert serviceType == context.expand('${#TestSuite#NDIP_serviceType}')
assert serviceStatus == context.expand('${#TestSuite#SrviceStatus0}')
assert returnCode == context.expand('${#TestSuite#RC_OK}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_OK}')

 </scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter IMPI)" id="30872a7d-7557-4507-8063-a509265354de"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter IMPI)" id="b208385d-32b9-492b-8b6c-a0d35987bd27"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
        <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <!--<get:type>IMPI</get:type>
-->
            <!--Optional:-->
            <!--<get:value>nimisha.gupta@orange-multimedia.fr</get:value>
-->
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1a0353c5-7f62-4574-8e8e-c348f5de40e4"/><con:assertion type="Schema Compliance" id="46e89a02-dc0b-4812-80c3-daff127564ca"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="d76cea0f-cca9-4184-8d1d-3a2ee578db59"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingInput}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter AID)" id="7d95bd16-ebf2-42ba-a09a-0b681e99c119"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter AID)" id="3b90df96-56c8-47c4-94e9-007a8a56fd11"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <!--<get:type>AID</get:type>
-->
            <!--Optional:-->
            <!--<get:value>1234404091222</get:value>
-->
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0b4643a9-c4a6-4dee-a44d-266985865ce6"/><con:assertion type="Schema Compliance" id="54997374-3cc5-4edc-ab2f-f3600ce2ef26"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="d4d0c705-074d-4a65-9c2e-4f4328ece236"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingInput}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter NDIP)" id="3cf3af41-529b-4050-a96f-359ff60a8daf"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter NDIP)" id="2fb8ee6a-be99-4988-8bd0-324f51adcc09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
        <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
             <!--<get:type>NDIP</get:type>
-->
            <!--Optional:-->
            <!--<get:value>1234404091222</get:value>
-->
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="a7995f5b-3532-47eb-9e9d-13350ca86695"/><con:assertion type="Schema Compliance" id="27ec20d5-af27-4cf0-9bd3-18dce9c1261e"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="50244d09-d1cf-43d7-9e99-431b045af95d"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingInput}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter BU)" id="d0333836-5f25-42a6-9e6c-66ca3f3f558b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter BU)" id="ca229a70-465c-42e4-8a25-94d02c915659"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit></get:businessUnit>
          <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_101}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f9152e98-61b5-4e1b-8b74-5accc210307c"/><con:assertion type="Schema Compliance" id="0638dbb1-a8c6-4a5f-8a44-bb8d890b9327"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="df69f276-f1b4-402f-bf66-671a0750b2bc"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingBU}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -102(Missing Parameter CPETYPE)" id="d080ab99-3af4-417f-82e3-b521f5632808"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -102(Missing Parameter CPETYPE)" id="fb4f543d-4623-4cb6-b78b-682a4a39fc51"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType></get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#AID_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="888f33e6-4711-4355-87cc-3801ebce9b82"/><con:assertion type="Schema Compliance" id="330414e1-62e4-4efc-aaf5-a2b080d4ff29"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="9f088836-6a59-4dc4-93ef-c9df27bb1986"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_MissingInput}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_MissingCPE}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -401(IOSW.REQ.AUTORISATION_FAILURE)" id="3e13dda2-762c-4d83-95e5-f288034f201e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -401(IOSW.REQ.AUTORISATION_FAILURE)" id="8c38481b-204c-4905-b1fb-4a7d386b27ed"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>FR</get:businessUnit>
         <get:cpeType>SOFTPHONE</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>AID</get:type>
            <!--Optional:-->
            <get:value>123440481</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="11c5fd75-d328-424e-8098-4a5e3398d56f"/><con:assertion type="Schema Compliance" id="a6c49632-c166-43b4-b40e-1efdd3058186"><con:configuration/></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -101(InvalidCutsomer type)" id="173c15bc-dfa2-4e28-827d-6d127d603475"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -101(InvalidCutsomer type)" id="51446e2a-2ad2-4897-9cfb-d3befff8085b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>HHH</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="f3ee0e6a-4c44-488f-aded-80c9441e64e4"/><con:assertion type="Schema Compliance" id="ab3f5148-d3da-4f27-b125-40de04e80ea4"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="278edf1a-0a13-441a-8f87-02d1216cf1c7"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-101"
assert returnFaultMessage == "Invalid input parameter : customerId.type"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -101(Invalid BU)" id="7223cb39-22c9-4223-83fb-ae020e81c019"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -101(Invalid BU)" id="1b53b6ca-3a0d-49b7-a46d-b6b2d7bcaa47"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>SP</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="78bfb8b8-1493-4e84-89b3-91f0c13316ed"/><con:assertion type="Schema Compliance" id="50415445-a70a-4273-9e39-f57fbf52615d"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="a0516399-7596-4079-852c-a6c88e8d2f06"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-101"
assert returnFaultMessage == "Invalid input parameter : businessUnit"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(BAD Format cpeType)" id="ff005058-a0d9-4a5e-b126-92e4e0f4fea5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(BAD Format cpeType)" id="c59a3c8e-598c-4da4-a6b3-3411465aaa0b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>FR</get:businessUnit>
         <get:cpeType>MyDeviceWhichIsSoftPhone!</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="bd8fef98-4a7b-411a-9a04-52fc14b126b5"/><con:assertion type="Schema Compliance" id="dca5bf9e-dd65-409a-8c5f-d9a41aaa5802"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="f5a99562-b2cb-4b66-945e-b390637dc50d"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-100"
assert returnFaultMessage == "Bad input data format : cpeType"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -100(BAD Format BU)" id="db6a7238-1c63-43d9-a57e-028c4ebd3e14"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -100(BAD Format BU)" id="97a3657a-86d1-4687-bf0f-86987fd41805"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
          <get:businessUnit>89</get:businessUnit>
         <get:cpeType>softPhone</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_IMPI}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#IMPI_104}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6e2fd65e-2a68-4aa0-9197-a9a1f2a24ca8"/><con:assertion type="Schema Compliance" id="407070fe-3617-4ce5-b23d-d16e7878fc84"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="effcaee1-34cd-43b4-81b9-bdaf90610a66"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == "-100"
assert returnFaultMessage == "Bad input data format : businessUnit"</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClientSOFTPHONEInfo - Error -103(FCPESOFT(-7))" id="982bc53a-2706-4443-9ee9-6d3cdd20f021"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetSoftPhoneInfosSoapBinding</con:interface><con:operation>getClientSOFTPHONEInfo</con:operation><con:request name="getClientSOFTPHONEInfo - Error -103(FCPESOFT(-7))" id="ac7caa2e-38f6-445f-9309-00eae35b4dbe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.170.231.171:1080/PapyrusSAV/services/GetSoftPhoneInfos-v2</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://WSA.francetelecom.com/types/GetSoftPhoneInfos">
   <soapenv:Header/>
   <soapenv:Body>
      <get:getClientSOFTPHONEInfo>
         <get:businessUnit>${#TestSuite#BU_FR}</get:businessUnit>
         <get:cpeType>${#TestSuite#CPETYPE}</get:cpeType>
         <get:customerId>
            <!--Optional:-->
            <get:type>${#TestSuite#ID_Type_AID}</get:type>
            <!--Optional:-->
            <get:value>${#TestSuite#notreachable_AID}</get:value>
         </get:customerId>
      </get:getClientSOFTPHONEInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="ea985550-c05a-4bc0-96c5-0382d0d48f5a"/><con:assertion type="Schema Compliance" id="a71acbeb-4117-48c8-bef9-6dfb211e30c8"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="be5466ee-5b75-400c-ab90-98e7e2041e96"><con:configuration><scriptText>// Declaration of Context variables
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )

responseHolder.namespaces [ "ns1" ] = "http://WSA.francetelecom.com/types/GetSoftPhoneInfos"

// Declaration and assignment of variables

def returnCode = responseHolder.getNodeValue("//ns1:returnCode")
def returnFaultMessage = responseHolder.getNodeValue("//ns1:returnFaultMessage")

// Assertion of these variables 

assert returnCode == context.expand('${#TestSuite#RC_103}')
assert returnFaultMessage == context.expand('${#TestSuite#RFM_unreachable}')</scriptText></con:configuration></con:assertion><con:credentials><con:username>papyihm</con:username><con:password>papypapyihm</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>BU_FR</con:name><con:value>FR</con:value></con:property><con:property><con:name>CPETYPE</con:name><con:value>SOFTPHONE</con:value></con:property><con:property><con:name>ID_TYPE_NDIP</con:name><con:value>NDIP</con:value></con:property><con:property><con:name>NDIP_Nominal</con:name><con:value>+33155886791</con:value></con:property><con:property><con:name>NDIP_nominal_accountId</con:name><con:value>123440402</con:value></con:property><con:property><con:name>NDIP_nominal_offer</con:name><con:value>Voipsoftphone</con:value></con:property><con:property><con:name>NDIP_authEmail</con:name><con:value>nimisha.gupta@orange.com</con:value></con:property><con:property><con:name>NDIP_connectionMode</con:name><con:value>NOMINAL</con:value></con:property><con:property><con:name>IPAddress</con:name><con:value>10.239.199.1</con:value></con:property><con:property><con:name>firstConnectionDate</con:name><con:value>2008-06-16T09:56:26.377Z</con:value></con:property><con:property><con:name>deviceBrand</con:name><con:value>Samsung</con:value></con:property><con:property><con:name>deviceName</con:name><con:value>GT-I9000</con:value></con:property><con:property><con:name>os</con:name><con:value>G0R0C1</con:value></con:property><con:property><con:name>osVersion</con:name><con:value>2.3.6</con:value></con:property><con:property><con:name>softwareVersion</con:name><con:value>G0R0C1</con:value></con:property><con:property><con:name>NDIP_serviceType</con:name><con:value>VOIP_SIP</con:value></con:property><con:property><con:name>NDIP_interfaceName</con:name><con:value>VMPAL</con:value></con:property><con:property><con:name>NDIP_interfaceValue</con:name><con:value>2</con:value></con:property><con:property><con:name>NDIP_serviceStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>NDIP_parameter_name1</con:name><con:value>authentication</con:value></con:property><con:property><con:name>NDIP_parameter_name2</con:name><con:value>IMPI</con:value></con:property><con:property><con:name>NDIP_parameter_name3</con:name><con:value>NDIP</con:value></con:property><con:property><con:name>NDIP_parameter_name4</con:name><con:value>URISIP</con:value></con:property><con:property><con:name>NDIP_parameter_name5</con:name><con:value>OutboundProxy</con:value></con:property><con:property><con:name>NDIP_parameter_name6</con:name><con:value>useDefaultOutboundProxyPort</con:value></con:property><con:property><con:name>NDIP_parameter_name7</con:name><con:value>LocalPortNumber</con:value></con:property><con:property><con:name>NDIP_parameter_name8</con:name><con:value>RegistrationDelay</con:value></con:property><con:property><con:name>NDIP_parameter_name9</con:name><con:value>MWIEnable</con:value></con:property><con:property><con:name>NDIP_parameter_name10</con:name><con:value>CallWaitingEnable</con:value></con:property><con:property><con:name>NDIP_parameter_name11</con:name><con:value>International</con:value></con:property><con:property><con:name>NDIP_parameter_name12</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>NDIP_parameter_name13</con:name><con:value>Premium</con:value></con:property><con:property><con:name>NDIP_parameter_name14</con:name><con:value>UserAgentDomain</con:value></con:property><con:property><con:name>NDIP_parameter_name15</con:name><con:value>VoiceMailBoxDomain</con:value></con:property><con:property><con:name>NDIP_parameter_name16</con:name><con:value>UserName</con:value></con:property><con:property><con:name>NDIP_parameter_name17</con:name><con:value>UserFirstName</con:value></con:property><con:property><con:name>NDIP_parameter_name18</con:name><con:value>SiPUserAgent</con:value></con:property><con:property><con:name>RC_OK</con:name><con:value>1</con:value></con:property><con:property><con:name>RFM_OK</con:name><con:value>RESULT OK</con:value></con:property><con:property><con:name>NDIP_parameter_value1</con:name><con:value>*****</con:value></con:property><con:property><con:name>NDIP_parameter_value2</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value3</con:name><con:value>+33123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value4</con:name><con:value>SIP:+33123440402@orange.com</con:value></con:property><con:property><con:name>NDIP_parameter_value5</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value6</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value7</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value8</con:name><con:value>FTI/123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value9</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>NDIP_parameter_value10</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>NDIP_parameter_value11</con:name><con:value>+33123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value12</con:name><con:value>+33123440402</con:value></con:property><con:property><con:name>NDIP_parameter_value13</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>NDIP_parameter_value14</con:name><con:value>ad.francetelecom.fr</con:value></con:property><con:property><con:name>NDIP_parameter_value15</con:name><con:value>ad.francetelecom.fr</con:value></con:property><con:property><con:name>NDIP_parameter_value16</con:name><con:value>Nimisha Gupta</con:value></con:property><con:property><con:name>NDIP_parameter_value17</con:name><con:value>Nimisha</con:value></con:property><con:property><con:name>NDIP_parameter_value18</con:name><con:value>OrangeSoftVersion-055-L01-A40</con:value></con:property><con:property><con:name>AID_nominal</con:name><con:value>123440401</con:value></con:property><con:property><con:name>AID_nominal_OS</con:name><con:value>G0R0C0</con:value></con:property><con:property><con:name>AID_nominal_softwareVersion</con:name><con:value>G0R0C0</con:value></con:property><con:property><con:name>AID_nominal_InterfaceValue</con:name><con:value>1</con:value></con:property><con:property><con:name>AID_parameter_value2</con:name><con:value>FTI/123440401</con:value></con:property><con:property><con:name>AID_parameter_value3</con:name><con:value>+33123440401</con:value></con:property><con:property><con:name>AID_parameter_value4</con:name><con:value>SIP:+33123440401@orange.com</con:value></con:property><con:property><con:name>IMPI_nominal_accountID</con:name><con:value>123440403</con:value></con:property><con:property><con:name>IMPI_nominal_os</con:name><con:value>G0R0C2</con:value></con:property><con:property><con:name>IMPI_nominal_softwareVersion</con:name><con:value>G0R0C2</con:value></con:property><con:property><con:name>IMPI_nominal_interfaceValue</con:name><con:value>3</con:value></con:property><con:property><con:name>IMPI_parameter_value2</con:name><con:value>FTI/123440403</con:value></con:property><con:property><con:name>IMPI_parameter_value3</con:name><con:value>+33123440403</con:value></con:property><con:property><con:name>IMPI_parameter_value4</con:name><con:value>SIP:+33123440403@orange.com</con:value></con:property><con:property><con:name>RC_InvalidReturnType</con:name><con:value>-104</con:value></con:property><con:property><con:name>RFM_InvalidAID</con:name><con:value>Undefined FCPESoft error : Invalid AID</con:value></con:property><con:property><con:name>RFM_InvalidNDIP</con:name><con:value>Undefined FCPESoft error : Invalid NDIP</con:value></con:property><con:property><con:name>RFM_InvalidIMPI</con:name><con:value>Undefined FCPESoft error : Invalid IMPI</con:value></con:property><con:property><con:name>RFM_InvalidBU</con:name><con:value>Undefined FCPESoft error : Invalid business unit</con:value></con:property><con:property><con:name>RFM_InvalidCPE</con:name><con:value>Undefined FCPESoft error : Invalid CPEType</con:value></con:property><con:property><con:name>RC_CustomerNotFound</con:name><con:value>-200</con:value></con:property><con:property><con:name>RFM_CustomerNotFound</con:name><con:value>requested customer does not exist</con:value></con:property><con:property><con:name>RC_FCPEUnreachable</con:name><con:value>-104</con:value></con:property><con:property><con:name>RFM_FCPEUnreachable</con:name><con:value>Undefined FCPESoft error : Unknown error</con:value></con:property><con:property><con:name>RC_InvalidIdType</con:name><con:value>-101</con:value></con:property><con:property><con:name>RFM_Invalid_AID</con:name><con:value>Bad input data format : customerId (type:AID)</con:value></con:property><con:property><con:name>RFM_Invalid_NDIP</con:name><con:value>Bad input data format : customerId (type:NDIP)</con:value></con:property><con:property><con:name>RFM_Invalid_IMPI</con:name><con:value>Bad input data format : customerId (type:IMPI)</con:value></con:property><con:property><con:name>AID_ServiceStatus0</con:name><con:value>123440480</con:value></con:property><con:property><con:name>AID_authEmail</con:name><con:value>nimisha.gupta1@orange.com</con:value></con:property><con:property><con:name>SrviceStatus0</con:name><con:value>0</con:value></con:property><con:property><con:name>RC_MissingInput</con:name><con:value>-102</con:value></con:property><con:property><con:name>RFM_MissingInput</con:name><con:value>Missing input parameter :  customerId</con:value></con:property><con:property><con:name>RFM_MissingBU</con:name><con:value>Missing input parameter :  businessUnit</con:value></con:property><con:property><con:name>RFM_MissingCPE</con:name><con:value>Missing input parameter :  cpeType</con:value></con:property><con:property><con:name>ID_Type_AID</con:name><con:value>AID</con:value></con:property><con:property><con:name>ID_Type_IMPI</con:name><con:value>IMPI</con:value></con:property><con:property><con:name>Nominal_IMPI</con:name><con:value>a1243f@orange-multimedia.fr</con:value></con:property><con:property><con:name>AID_104</con:name><con:value>123440404</con:value></con:property><con:property><con:name>NDIP_104</con:name><con:value>123440405</con:value></con:property><con:property><con:name>IMPI_104</con:name><con:value>123440406</con:value></con:property><con:property><con:name>BU_104</con:name><con:value>123440407</con:value></con:property><con:property><con:name>CPE_104</con:name><con:value>123440408</con:value></con:property><con:property><con:name>AID_noCustomer</con:name><con:value>123440499</con:value></con:property><con:property><con:name>Unknown_AID</con:name><con:value>123440409</con:value></con:property><con:property><con:name>Unreachable_AID</con:name><con:value>123440409</con:value></con:property><con:property><con:name>AID_101</con:name><con:value>1234404091222</con:value></con:property><con:property><con:name>NDIP_101</con:name><con:value>1234404091222</con:value></con:property><con:property><con:name>IMPI_101</con:name><con:value>nimisha.gupta@orange-multimedia.fr</con:value></con:property><con:property><con:name>RC_BadFormat</con:name><con:value>-100</con:value></con:property><con:property><con:name>RC_103</con:name><con:value>-103</con:value></con:property><con:property><con:name>RFM_unreachable</con:name><con:value>FCPESoft unreachable</con:value></con:property><con:property><con:name>notreachable_AID</con:name><con:value>123440482</con:value></con:property><con:property><con:name>NDIP_100</con:name><con:value>18888888888888888888888888888</con:value></con:property><con:property><con:name>IMPI_100</con:name><con:value>11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</con:value></con:property><con:property><con:name>Port</con:name><con:value>7031</con:value></con:property><con:property><con:name>Server</con:name><con:value>10.170.231.171</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>